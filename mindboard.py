import streamlit as st
import pandas as pd
import plotly.graph_objects as go
import pycountry
import matplotlib
import matplotlib.cm

st.set_page_config(layout="wide")
st.title("üåç ROAS vs LTV/CPI ‚Äî –î–∏–Ω–∞–º–∏–∫–∞ –ø–æ –Ω–µ–¥–µ–ª—è–º + –≤–µ—Å installs")

@st.cache_data
def load_data():
    return pd.read_csv("data.csv")

df = load_data()

# –ú–µ—Ç—Ä–∏–∫–∏ –¥–ª—è –≤—Ç–æ—Ä–æ–π –æ—Å–∏
ltv_metrics = ['lifetime_value', 'ltv_adv', 'ltv_iap', 'cpi']  # –ø–æ–¥ —Å–≤–æ–∏ –Ω–∞–∑–≤–∞–Ω–∏—è!
all_metrics = ['roas_w0'] + ltv_metrics

# –ì–ª–æ–±–∞–ª—å–Ω—ã–π —Ñ–∏–ª—å—Ç—Ä –ø–æ installs –∑–∞ –≤—Å—ë –≤—Ä–µ–º—è
country_installs = df.groupby('country', as_index=False)['installs'].sum()
country_list = country_installs[country_installs['installs'] > 300].sort_values('installs', ascending=False)
top_countries = country_list['country'].tolist()[:5]

st.subheader("–í—ã–±–µ—Ä–∏—Ç–µ —Å—Ç—Ä–∞–Ω—ã –¥–ª—è —Å—Ä–∞–≤–Ω–µ–Ω–∏—è (installs > 300 –∑–∞ –≤—Å—ë –≤—Ä–µ–º—è):")
selected_countries = []
for country in country_list['country']:
    flag = ''
    try:
        country_obj = pycountry.countries.lookup(country)
        flag = ''.join([chr(127397 + ord(c)) for c in country_obj.alpha_2.upper()])
    except Exception:
        pass
    checked = st.checkbox(f"{flag} {country} ({int(country_list[country_list['country']==country]['installs'])} installs)", 
                          value=country in top_countries, key=country)
    if checked:
        selected_countries.append(country)

if not selected_countries:
    st.warning("–í—ã–±–µ—Ä–∏ —Ö–æ—Ç—è –±—ã –æ–¥–Ω—É —Å—Ç—Ä–∞–Ω—É!")
    st.stop()

# –§–∏–ª—å—Ç—Ä –ø–æ —Å—Ç—Ä–∞–Ω–∞–º –∏ installs (–ø–æ –Ω–µ–¥–µ–ª—è–º)
df_view = df[df['country'].isin(selected_countries)].copy()
df_view['roas_w0'] = df_view['roas_w0'] * 100

# –°–æ—Ä—Ç–∏—Ä—É–µ–º –Ω–µ–¥–µ–ª–∏
weeks = sorted(df_view['week'].unique())
df_view['week'] = pd.Categorical(df_view['week'], categories=weeks, ordered=True)

# –î–ª—è –≥—Ä–∞–¥–∏–µ–Ω—Ç–∞ –ø–æ installs
min_installs = df_view['installs'].min()
max_installs = df_view['installs'].max()
colormap = matplotlib.cm.get_cmap('viridis')

def installs_to_color(installs):
    norm_val = (installs - min_installs) / (max_installs - min_installs) if max_installs > min_installs else 0.5
    return matplotlib.colors.rgb2hex(colormap(norm_val))

def installs_to_width(installs):
    # –®–∏—Ä–∏–Ω–∞ –ª–∏–Ω–∏–∏ –æ—Ç 2 –¥–æ 6, –ø—Ä–æ–ø–æ—Ä—Ü–∏–æ–Ω–∞–ª—å–Ω–æ installs
    if max_installs > min_installs:
        return 2 + 4 * (installs - min_installs) / (max_installs - min_installs)
    else:
        return 4

# –ì—Ä–∞—Ñ–∏–∫: –∫–æ–º–±–∏–Ω–∏—Ä–æ–≤–∞–Ω–Ω—ã–π (ROAS —Å–ª–µ–≤–∞, –æ—Å—Ç–∞–ª—å–Ω—ã–µ ‚Äî —Å–ø—Ä–∞–≤–∞)
fig = go.Figure()

for country in selected_countries:
    country_mask = df_view['country'] == country
    flag = ''
    try:
        country_obj = pycountry.countries.lookup(country)
        flag = ''.join([chr(127397 + ord(c)) for c in country_obj.alpha_2.upper()])
    except Exception:
        pass
    label = f"{flag} {country}"

    # –ì—Ä–∞–¥–∏–µ–Ω—Ç –∏ —à–∏—Ä–∏–Ω–∞ –ø–æ installs (–±–µ—Ä—ë–º installs –ø–æ –∫–∞–∂–¥–æ–π –Ω–µ–¥–µ–ª–µ, —Å–ø–∏—Å–æ–∫)
    installs_vals = df_view[country_mask]['installs'].tolist()
    color_vals = [installs_to_color(inst) for inst in installs_vals]
    width_vals = [installs_to_width(inst) for inst in installs_vals]

    # ROAS ‚Äî –ª–µ–≤–∞—è –æ—Å—å, –∏–Ω–¥–∏–≤–∏–¥—É–∞–ª—å–Ω—ã–π —Å—Ç–∏–ª—å –¥–ª—è –∫–∞–∂–¥–æ–π —Ç–æ—á–∫–∏ –ª–∏–Ω–∏–∏
    fig.add_trace(go.Scatter(
        x=df_view[country_mask]['week'],
        y=df_view[country_mask]['roas_w0'],
        name=f"ROAS (%) {label}",
        mode="lines+markers",
        yaxis="y1",
        # –¢–æ–ª—å–∫–æ –¥–ª—è –≤—Å–µ–≥–æ trace –º–æ–∂–Ω–æ color/width, –Ω–æ –º–æ–∂–Ω–æ —Ä–∞–∑–±–∏—Ç—å –Ω–∞ —Å–µ–≥–º–µ–Ω—Ç—ã –µ—Å–ª–∏ —Ö–æ—á–µ—Ç—Å—è –ø—Ä—è–º ‚Äú–≥—Ä–∞–¥–∏–µ–Ω—Ç‚Äù
        line=dict(color=installs_to_color(df_view[country_mask]['installs'].mean()), width=installs_to_width(df_view[country_mask]['installs'].mean())),
        marker=dict(
            color=color_vals,
            size=10,
            line=dict(width=2, color='white')
        ),
        showlegend=True,
    ))

    # LTV All, Ad, IAP, CPI ‚Äî –ø—Ä–∞–≤–∞—è –æ—Å—å
    for m_idx, metric in enumerate(ltv_metrics):
        if metric not in df_view.columns:
            continue
        fig.add_trace(go.Scatter(
            x=df_view[country_mask]['week'],
            y=df_view[country_mask][metric],
            name=f"{metric.upper()} {label}",
            mode="lines+markers",
            yaxis="y2",
            line=dict(dash='dot', color=f"rgba(160,160,{100 + 30*m_idx},0.7)"),
            marker=dict(size=7),
            showlegend=(country == selected_countries[0])
        ))

# Layout —Å –æ—Å—è–º–∏ –∏ —Ü–≤–µ—Ç–æ–≤–æ–π –ª–µ–≥–µ–Ω–¥–æ–π
fig.update_layout(
    title="ROAS (%) ‚Äî —Ü–≤–µ—Ç/—Ç–æ–ª—â–∏–Ω–∞ –ø–æ installs, LTV/CPI ($) ‚Äî –ø—Ä–∞–≤–∞—è –æ—Å—å",
    xaxis=dict(title="–ù–µ–¥–µ–ª—è"),
    yaxis=dict(title="ROAS (%)", side='left'),
    yaxis2=dict(
        title="LTV All / LTV Ad / LTV IAP / CPI ($)",
        overlaying='y',
        side='right',
        showgrid=False,
    ),
    legend=dict(
        orientation="h",
        yanchor="bottom",
        y=1.02,
        xanchor="center",
        x=0.5,
        font=dict(size=11)
    ),
    margin=dict(r=30, t=60, l=30, b=30),
    height=600
)

st.plotly_chart(fig, use_container_width=True)
